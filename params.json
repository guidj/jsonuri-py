{
  "name": "Jsonuri-py",
  "tagline": "Serialisation of complex JSON to URL GET parameters, and reverse",
  "body": "\r\n# JSONURI-PY\r\n \r\nThis package helps you convert Python dictionaries into an HTTP GET request parameters, and vice-versa. \r\n\r\nAn example of a practical application would be to send JSON data over HTTP GET, e.g. to a static resource small.png, and harvest the data from access logs instead of running real-time data collection.\r\n\r\n**Note**: You should avoid send sensitive information using this mechanism, or at least ensure you send your data over SSL.\r\n\r\nEquivalent libs/packages:\r\n==========================\r\n\r\n| Language | Repo                                |\r\n|----------|-------------------------------------|\r\n| JavaScript   | https://github.com/guidj/jsonuri-js |\r\n\r\n\r\nExamples:\r\n=============\r\n\r\nSerialization:\r\n---------------\r\n\r\n```python\r\n>>> import json\r\n>>> import urllib.parse\r\n>>> from jsonuri import jsonuri\r\n>>> jsonuri.serialize(json.loads('{\"age\": \"31\", \"name\": \"John\"}'))\r\n'age%3D31%26name%3DJohn'\r\n>>> jsonuri.serialize(json.loads('{\"age\": \"31\", \"name\": \"John\"}'), encode=False)\r\n'age=31&name=John'\r\n```\r\n\r\nDesirialization\r\n----------------\r\n\r\n```python\r\n>>> string = \"name=John&age=31\" # or \"name%3DJohn%26age%3D31\"\r\n>>> jsonuri.deserialize(string)\r\n{'age': '31', 'name': 'John'}\r\n```\r\n\r\nNotes\r\n======\r\n\r\nThe package was not designed to process HTML form data, specifically multi-value variables, i.e. from select attributes. Though if you convert the data to a JSON/JavaScript object, that should work.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}